gi <- gi + geom_histogram(aes(y = ..density..), color = "green", fill = "pink")
gi <- gi + stat_function(fun = dnorm, color = 'black', args = list(mean = Theory_mean, sd=sqrt(Theory_var)))
gi <- gi + geom_vline(xintercept = Theory_mean, colour = "blue", size = 2)
gi <- gi + geom_density(colour="red")
gi <- gi + ggtitle('Distribution of Averages of 1000 Samples of 40 Random Exponential Variables')
gi <- gi + xlab('Means')
gi <- gi + ylab('Density')
gi
gi <- ggplot(data.frame(x = means_expone), aes(x = x))
gi <- gi + geom_histogram(aes(y = ..density..), color = "violet", fill = "pink")
gi <- gi + stat_function(fun = dnorm, color = 'black', args = list(mean = Theory_mean, sd=sqrt(Theory_var)))
gi <- gi + geom_vline(xintercept = Theory_mean, colour = "blue", size = 2)
gi <- gi + geom_density(colour="red")
gi <- gi + ggtitle('Distribution of Averages of 1000 Samples of 40 Random Exponential Variables')
gi <- gi + xlab('Means')
gi <- gi + ylab('Density')
gi
gi <- ggplot(data.frame(x = means_expone), aes(x = x))
gi <- gi + geom_histogram(aes(y = ..density..), color = "violet", fill = "pink")
gi <- gi + stat_function(fun = dnorm, color = 'black', args = list(mean = Theory_mean, sd=sqrt(Theory_var)))
gi <- gi + geom_vline(xintercept = Theory_mean, colour = "blue", size = 2)
gi <- gi + geom_density(colour="red")
gi <- gi + ggtitle("Histogram of Averages of 40 Exponentials over 1000 Simulations")
gi <- gi + xlab("Means")
gi <- gi + ylab("Density")
gi
gi <- ggplot(data.frame(x = means_expone), aes(x = x))
gi <- gi + geom_histogram(aes(y = ..density..), color = "violet", fill = "pink")
gi <- gi + stat_function(fun = dnorm, color = "black", args = list(mean = Theory_mean, sd=sqrt(Theory_var)))
gi <- gi + geom_vline(xintercept = Theory_mean, colour = "blue", size = 2)
gi <- gi + geom_density(colour="red")
gi <- gi + ggtitle("Histogram of Averages of 40 Exponentials over 1000 Simulations")
gi <- gi + xlab("Means")
gi <- gi + ylab("Density")
gi
gi <- ggplot(data.frame(x = means_expone), aes(x = x))
gi <- gi + geom_histogram(aes(y = ..density..), color = "violet", fill = "pink")
gi <- gi + stat_function(fun = dnorm, color = "black", args = list(mean = Theory_mean, sd=sqrt(Theory_var)))
gi <- gi + geom_vline(xintercept = Theory_mean, colour = "blue", size = 2)
gi <- gi + geom_density(colour="yellow")
gi <- gi + ggtitle("Histogram of Averages of 40 Exponentials over 1000 Simulations")
gi <- gi + xlab("Means")
gi <- gi + ylab("Density")
gi
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(ToothGrowth)
head(ToothGrowth)
data(ToothGrowth)
head(ToothGrowth,10)
data(ToothGrowth)
head(ToothGrowth,15)
data(ToothGrowth)
head(ToothGrowth,10)
summary(ToothGrowth)
summary(ToothGrowth)
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(aes(fill=factor(dose), notch = TRUE))
gg <- gg + geom_point()
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(aes(fill=factor(dose)))
gg <- gg + geom_point()
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_boxplot(
# custom boxes
color="blue",
fill="blue",
alpha=0.2,
# Notch?
notch=TRUE,
notchwidth = 0.8,
# custom outliers
outlier.colour="red",
outlier.fill="red",
outlier.size=3
) +
labs(title="Fuel economy data",
subtitle="Distribución de las millas por galón según la clase",
caption="fuente: http://fueleconomy.gov",
y="Millas por galon (autopista)",
x="Clase",
color=NULL) +  # title and caption
theme_elegante()
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_boxplot(
# custom boxes
color="blue",
fill="blue",
alpha=0.2,
# Notch?
notch=TRUE,
notchwidth = 0.8,
# custom outliers
outlier.colour="red",
outlier.fill="red",
outlier.size=3
) +
labs(title="Fuel economy data",
subtitle="Distribución de las millas por galón según la clase",
caption="fuente: http://fueleconomy.gov",
y="Millas por galon (autopista)",
x="Clase",
color=NULL) +  # title and caption
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_boxplot(
# custom boxes
color="blue",
fill="blue",
alpha=0.2,
# Notch?
notch=TRUE,
notchwidth = 0.8,
# custom outliers
outlier.colour="red",
outlier.fill="red",
outlier.size=3
) +
labs(title="Fuel economy data",
subtitle="Distribución de las millas por galón según la clase",
caption="fuente: http://fueleconomy.gov",
y="Millas por galon (autopista)",
x="Clase",
color=NULL) +  # title and caption
theme_bw(base_size=base_size))
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(notch=TRUE)
gg <- gg + geom_point()
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(aes(fill=factor(dose)))
gg <- gg + geom_point()
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplotfill = "lightgray", color = "black")
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(fill = "lightgray", color = "black")
gg <- gg + geom_point()
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(aes(fill=factor(dose)))
gg <- gg + geom_point()
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(aes(fill=factor(dose)))
gg <- gg + geom_point()
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg <- gg + theme_grey()
gg
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(aes(fill=factor(dose)))
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
gg <- ggplot(ToothGrowth, aes(x=dose, y=len))
gg <- gg + geom_boxplot(aes(fill=factor(dose)))
gg <- gg + facet_grid(.~supp)
gg <- gg + ggtitle("Tooth Length vs. Dose Amount")
gg
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data("mtcars")
data("mtcars")
head(mtcars)
names(mtcars)
colSums(is.na(mtcars))
colSums(is.na(mtcars))
aggregate(mpg~am, data=mtcars, mean)
mtcars$am <- as.factor(mtcars$am)
AutyManTra <- ggplot(aes(x=am, y=mpg), data=mtcars) + geom_boxplot(aes(fill=am))
AutyManTra <- AutyManTra + labs(title = "Automatic vs Manual Transmission")
AutyManTra <- AutyManTra + xlab("Transmission of Type")
AutyManTra <- AutyManTra + ylab("MPG")
AutyManTra <- AutyManTra + labs(fill = "Legend (0=AT, 1=MT)")
AutyManTra
aggregate(mpg~am, data=mtcars, mean)
atDt<-mtcars[mtcars$am == "AT",]
mtDt<-mtcars[mtcars$am == "MT",]
t.test(atDt$mpg, mtData$mpg)
atDt<-mtcars[mtcars$am == "AT",]
mtDt<-mtcars[mtcars$am == "MT",]
t.test(atDt$mpg, mtDt$mpg)
atDt<-mtcars[mtcars$am == "AT",]
mtDt<-mtcars[mtcars$am == "MT",]
t.test(atDt$mpg, mt$mpg)
atDt<-mtcars[mtcars$am == "AT",]
mtDt<-mtcars[mtcars$am == "MT",]
t.test(atDt$mpg, mtDt$mpg)
atData<-mtcars[mtcars$am == "AT",]
mtData<-mtcars[mtcars$am == "MT",]
t.test(atData$mpg, mtData$mpg)
D_automatic <- mtcars[mtcars$am == "Automatic",]
D_manual <- mtcars[mtcars$am == "Manual",]
t.test(D_automatic$mpg, D_manual$mpg)
str(mtcars)
aggregate(mpg~am, data=mtcars, mean)
mean(mpg~am)
mtcars %>% describe()
mtcars %>% describe()
str(mtcars)
mtcars %>% explore_tbl()
str(mtcars)
?%>%
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data("mtcars")
head(mtcars)
str(mtcars)
colSums(is.na(mtcars))
mtcars$cyl  <- factor(mtcars$cyl)
mtcars$vs   <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual"))
D_automatic <- mtcars[mtcars$am == "Automatic",]
D_manual <- mtcars[mtcars$am == "Manual",]
t.test(D_automatic$mpg, D_manual$mpg)
mtcars$am <- as.factor(mtcars$am)
AutyManTra <- ggplot(aes(x=am, y=mpg), data=mtcars) + geom_boxplot(aes(fill=am))
AutyManTra <- AutyManTra + labs(title = "Automatic vs Manual Transmission")
AutyManTra <- AutyManTra + xlab("Transmission of Type")
AutyManTra <- AutyManTra + ylab("MPG")
AutyManTra <- AutyManTra + labs(fill = "Legend (0=AT, 1=MT)")
AutyManTra
D_automatic <- mtcars[mtcars$am == "Automatic",]
D_manual <- mtcars[mtcars$am == "Manual",]
t.test(D_automatic$mpg, D_manual$mpg)
Data_automatic <- mtcars[mtcars$am == "Automatic",]
Data_manual <- mtcars[mtcars$am == "Manual",]
t.test(Data_automatic$mpg, Data_manual$mpg)
fit_0 <- lm( mpg ~ as.factor(am), data=mtcars)
summary(fit_0)
fit_0 <- lm( mpg ~ as.factor(am), data=mtcars)
summary(fit_0)
mtcars$am <- as.factor(mtcars$am)
AutyManTra <- ggplot(aes(x=am, y=mpg), data=mtcars) + geom_boxplot(aes(fill=am))
AutyManTra <- AutyManTra + labs(title = "Automatic vs Manual Transmission")
AutyManTra <- AutyManTra + xlab("Transmission of Type")
AutyManTra <- AutyManTra + ylab("MPG")
AutyManTra
mtcars$am <- as.factor(mtcars$am)
AutyManTra <- ggplot(aes(x=am, y=mpg), data=mtcars) + geom_boxplot(aes(fill=am))
AutyManTra <- AutyManTra + labs(title = "Automatic vs Manual Transmission")
AutyManTra <- AutyManTra + xlab("Transmission of Type")
AutyManTra <- AutyManTra + ylab("MPG")
AutyManTra <- AutyManTra + labs(fill = "Legend (0=AT, 1=MT)")
AutyManTra
Correl <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
?select
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
Correl <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(Correl)
Correl <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(Correl,  pch=3, cex=0.6, col='dodgerblue2')
Correl <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(Correl,  upper.panel = panel.reg,
diag.panel = panel.hist,
lower.panel = panel.smoot)
Correl <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(Correl,  upper.panel = panel.reg,
diag.panel = panel.hist,
lower.panel = panel.smooth)
Correl <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(Correl,  pch=3, cex=0.6, col='dodgerblue2')
fit_1 <- lm( mtcars$mpg ~ hp + wt, data=mtcars)
summary(fit_1)
fit_2 <- lm( mtcars$mpg ~ hp + wt, data=mtcars)
summary(fit_2)
fit_1 <- lm( mpg ~ as.factor(am), data=mtcars)
summary(fit_1)
Correl <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(Correl,  pch=3, cex=0.6, col='dodgerblue2')
par(mfrow = c(2,2))
plot(fit_2)
?par
par(mfrow = c(2,2))
plot(fit_2, pch = 1)
par(mfrow = c(2,2))
plot(fit_2, pch = 3)
par(mfrow = c(2,2))
plot(fit_2, pch = 3, col='dodgerblue2' )
par(mfrow = c(2,2))
plot(fit_2, pch = 3, col= "red" )
par(mfrow = c(2,2))
plot(fit_2, pch = 3, col= "96" )
par(mfrow = c(2,2))
plot(fit_2, pch = 3, col= "24" )
par(mfrow = c(2,2))
plot(fit_2, pch = 3, col= "red" )
knitr::opts_chunk$set(echo = TRUE )
modFitA1 <- rpart(classe ~ ., data=Train, method="anova")
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
library(RColorBrewer)
modFitA1 <- rpart(classe ~ ., data=Train, method="anova")
knitr::opts_chunk$set(echo = TRUE )
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
library(RColorBrewer)
Train <- read.csv("pml-training.csv")
Test <- read.csv("pml-testing.csv")
dim(Train)
dim(Test)
sum(complete.cases(Train))
Train<- Train[, colSums(is.na(Train)) == 0]
Test <- Test[, colSums(is.na(Test)) == 0]
cl <- Train$classe
Train_Removed <- grepl("^X|timestamp|window", names(Train))
Train <- Train[, !Train_Removed]
Train_Clean <- Train[, sapply(Train, is.numeric)]
Train_Clean$classe <- cl
Test_Removed <- grepl("^X|timestamp|window", names(Test))
Test <- Test[, !Test_Removed]
Test_Clean <- Test[, sapply(Test, is.numeric)]
set.seed(12345)
inTrain <- createDataPartition(Train_Clean$classe, p=0.70, list=FALSE)
Train <- Train_Clean[inTrain, ]
Test <- Test_Clean[-inTrain, ]
dim(Train)
modFitA1 <- rpart(classe ~ ., data=Train, method="anova")
rpart.plot(modFitA1)
modFitA1 <- rpart(classe ~ ., data=Train, method="class")
rpart.plot(modFitA1)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
library(RColorBrewer)
library(rattle)
install.packages("rattle")
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
library(RColorBrewer)
library(rattle)
modFitA1 <- rpart(classe ~ ., data=Train, method="class")
fancyRpartPlot(modFitA1)
modFitA1 <- rpart(classe ~ ., data=Train, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
predictRf <- predict(modelRf, Test)
predictRf <- predict(modFitA1, Test)
confusionMatrix(Test$classe, predictRf)
predictionsA1 <- predict(modFitA1, Test, type = "class")
confusionMatrix(predictionsA1, Test$classe)
predictionsA1 <- predict(modFitA1, Test, type = "class")
confusionMatrix(predictionsA1, factor(Test$classe))
DT_Predict <- predict(modFitA1,newdata=Test)
DT_cm <- confusionMatrix(Test$classe,DT_Predict)
DT_Predict <- predict(modFitA1,newdata=Test)
DT_cm <- confusionMatrix(Test$classe,DT_Predict)
NZV <- nearZeroVar(Train)
NZV
knitr::opts_chunk$set(echo = TRUE )
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
library(RColorBrewer)
library(rattle)
Train <- read.csv("pml-training.csv")
Test <- read.csv("pml-testing.csv")
dim(Train)
dim(Test)
sum(complete.cases(Train))
Train<- Train[, colSums(is.na(Train)) == 0]
Test <- Test[, colSums(is.na(Test)) == 0]
cl <- Train$classe
Train_Removed <- grepl("^X|timestamp|window", names(Train))
Train <- Train[, !Train_Removed]
Train_Clean <- Train[, sapply(Train, is.numeric)]
Train_Clean$classe <- cl
Test_Removed <- grepl("^X|timestamp|window", names(Test))
Test <- Test[, !Test_Removed]
Test_Clean <- Test[, sapply(Test, is.numeric)]
NZV <- nearZeroVar(Train)
NZV
set.seed(22519)
inTrain <- createDataPartition(Train_Clean$classe, p=0.70, list=FALSE)
Train <- Train_Clean[inTrain, ]
Test <- Test_Clean[-inTrain, ]
dim(Train)
modFitA1 <- rpart(classe ~ ., data=Train, method="class")
fancyRpartPlot(modFitA1)
DT_Predict <- predict(modFitA1,newdata=Test)
DT_cm <- confusionMatrix(Test$classe,DT_Predict)
knitr::opts_chunk$set(echo = TRUE)
modFitA1 <- rpart(classe ~ ., data=Train, method="class")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(e1071)
library(randomForest)
library(corrplot)
library(gbm)
library(RColorBrewer)
Train <-  read.csv("pml-training.csv")
Test  <- read.csv("pml-testing.csv")
set.seed(69420)
inTrain  <- createDataPartition(Train$classe, p=0.7, list=FALSE)
TrainD <- Train[inTrain, ]
TestD  <- Train[-inTrain, ]
dim(TrainD)
str(TrainD)
TrainD <- TrainD[, -c(1:7)]
TestD <- TestD[, -c(1:7)]
NZV <- nearZeroVar(TrainD)
TrainD <- TrainD[, -NZV]
TestD  <- TestD[, -NZV]
allNA    <- sapply(TrainD, function(x) mean(is.na(x))) > 0.95
TrainD <- TrainD[, allNA==FALSE]
TestD  <-TestD[, allNA==FALSE]
dim(TrainD)
TrainD <- TrainD[, -c(1:7)]
TestD <- TestD[, -c(1:7)]
NZV <- nearZeroVar(TrainD)
TrainD <- TrainD[, -NZV]
TestD  <- TestD[, -NZV]
allNA    <- sapply(TrainD, function(x) mean(is.na(x))) > 0.95
TrainD <- TrainD[, allNA==FALSE]
TestD  <-TestD[, allNA==FALSE]
dim(TrainD)
shiny::runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Myapp')
runApp()
iris %>% ggplot(aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +
geom_point(aes(shape=Species), size=1.5) + xlab("Sepal Length") + ylab("Sepal Width") +
ggtitle("Scatterplot with smoothers")
shiny::runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp()
runApp()
runApp()
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp()
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp()
runApp()
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/prueba')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
head(iris)
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
runApp('C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary')
setwd("C:/Users/Maribel Mena/Desktop/Developing Data Products/Mary")
shiny::runApp()
runApp()
runApp()
runApp()
